{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\randy\\\\Documents\\\\Code\\\\CodingDojo\\\\Mern\\\\authors\\\\client\\\\src\\\\views\\\\NewAuthor.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Link } from '@reach/router';\nimport AuthorForm from '../components/AuthorForm';\nexport default (props => {\n  const [author, setAuthor] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  const [errors, setErrors] = useState([]);\n  useEffect(() => {\n    axios.get('http://localhost:8000/api/author').then(res => {\n      setAuthor(res.data);\n      setLoaded(true);\n    });\n  }, []);\n\n  const createAuthor = person => {\n    axios.post('http://localhost:8000/api/author', person).then(res => {\n      setAuthor([...author, res.data]);\n    }).then(res => console.log(res)) // If successful, do something with the response. \n    .catch(err => {\n      const errorResponse = err.response.data.errors; // Get the errors from err.response.data\n\n      const errorArr = []; // Define a temp error array to push the messages in\n\n      for (const key of Object.keys(errorResponse)) {\n        // Loop through all errors and get the messages\n        errorArr.push(errorResponse[key].message);\n      } // Set Errors\n\n\n      setErrors(errorArr);\n    });\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Favorite authors\"), React.createElement(Link, {\n    to: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Home\"), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Add a new author:\"), React.createElement(AuthorForm, {\n    onSubmitProp: createAuthor,\n    initialName: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }));\n});","map":{"version":3,"sources":["C:/Users/randy/Documents/Code/CodingDojo/Mern/authors/client/src/views/NewAuthor.js"],"names":["React","useEffect","useState","axios","Link","AuthorForm","props","author","setAuthor","loaded","setLoaded","errors","setErrors","get","then","res","data","createAuthor","person","post","console","log","catch","err","errorResponse","response","errorArr","key","Object","keys","push","message"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,eAArB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AAEA,gBAAeC,KAAK,IAAI;AACpB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZE,IAAAA,KAAK,CAACU,GAAN,CAAU,kCAAV,EACKC,IADL,CACUC,GAAG,IAAG;AACRP,MAAAA,SAAS,CAACO,GAAG,CAACC,IAAL,CAAT;AACAN,MAAAA,SAAS,CAAC,IAAD,CAAT;AACH,KAJL;AAKH,GANQ,EAMN,EANM,CAAT;;AAQA,QAAMO,YAAY,GAAGC,MAAM,IAAI;AAC3Bf,IAAAA,KAAK,CAACgB,IAAN,CAAW,kCAAX,EAA+CD,MAA/C,EACKJ,IADL,CACUC,GAAG,IAAE;AACPP,MAAAA,SAAS,CAAC,CAAC,GAAGD,MAAJ,EAAYQ,GAAG,CAACC,IAAhB,CAAD,CAAT;AACH,KAHL,EAIKF,IAJL,CAIUC,GAAG,IAAEK,OAAO,CAACC,GAAR,CAAYN,GAAZ,CAJf,EAIiC;AAJjC,KAKKO,KALL,CAKWC,GAAG,IAAE;AACR,YAAMC,aAAa,GAAGD,GAAG,CAACE,QAAJ,CAAaT,IAAb,CAAkBL,MAAxC,CADQ,CACwC;;AAChD,YAAMe,QAAQ,GAAG,EAAjB,CAFQ,CAEa;;AACrB,WAAK,MAAMC,GAAX,IAAkBC,MAAM,CAACC,IAAP,CAAYL,aAAZ,CAAlB,EAA8C;AAAE;AAC5CE,QAAAA,QAAQ,CAACI,IAAT,CAAcN,aAAa,CAACG,GAAD,CAAb,CAAmBI,OAAjC;AACH,OALO,CAMR;;;AACAnB,MAAAA,SAAS,CAACc,QAAD,CAAT;AACH,KAbL;AAcH,GAfD;;AAiBA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,EAEI,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAE,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAHJ,EAII,oBAAC,UAAD;AAAY,IAAA,YAAY,EAAET,YAA1B;AAAwC,IAAA,WAAW,EAAC,EAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADJ;AAQH,CArCD","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\nimport { Link } from '@reach/router';\r\nimport AuthorForm from '../components/AuthorForm'\r\n\r\nexport default props => {\r\n    const [author, setAuthor] = useState([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [errors, setErrors] = useState([]); \r\n    useEffect(() => {\r\n        axios.get('http://localhost:8000/api/author')\r\n            .then(res =>{ \r\n                setAuthor(res.data)\r\n                setLoaded(true);\r\n            });\r\n    }, [])\r\n    \r\n    const createAuthor = person => {\r\n        axios.post('http://localhost:8000/api/author', person)\r\n            .then(res=>{\r\n                setAuthor([...author, res.data]);\r\n            })\r\n            .then(res=>console.log(res)) // If successful, do something with the response. \r\n            .catch(err=>{\r\n                const errorResponse = err.response.data.errors; // Get the errors from err.response.data\r\n                const errorArr = []; // Define a temp error array to push the messages in\r\n                for (const key of Object.keys(errorResponse)) { // Loop through all errors and get the messages\r\n                    errorArr.push(errorResponse[key].message)\r\n                }\r\n                // Set Errors\r\n                setErrors(errorArr);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Favorite authors</h1>\r\n            <Link to={\"/\"}>Home</Link>\r\n            <h3>Add a new author:</h3>\r\n            <AuthorForm onSubmitProp={createAuthor} initialName=\"\"/>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}