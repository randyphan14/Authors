{"version":3,"sources":["components/AuthorForm.js","components/DeleteButton.js","components/AuthorList.js","views/Main.js","views/Update.js","views/NewAuthor.js","App.js","serviceWorker.js","index.js"],"names":["props","initialName","onSubmitProp","useState","name","setName","onSubmit","e","preventDefault","type","value","onChange","target","to","authorId","successCallback","onClick","axios","delete","then","res","stuff","setStuff","useEffect","get","data","map","author","idx","key","_id","DeleteButton","filter","people","setPeople","loaded","setLoaded","AuthorList","removeFromDom","id","setAuthor","AuthorForm","put","console","log","errors","setErrors","err","index","person","post","catch","errorResponse","response","errorArr","Object","keys","push","message","App","className","Main","path","NewAuthor","Update","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.5015e6ba.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\nimport { Link } from '@reach/router';\r\n\r\nexport default props => {\r\n    const { initialName, onSubmitProp } = props;\r\n    const [name, setName] = useState(initialName); \r\n    \r\n\r\n    const onSubmitHandler = e => {\r\n        e.preventDefault();\r\n        onSubmitProp({name});\r\n    }\r\n    \r\n    \r\n    return (\r\n        <form onSubmit={onSubmitHandler}>\r\n            <p>\r\n                <label>Name</label><br/>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"name\" value={name}\r\n                    onChange={(e) => { setName(e.target.value) }}/>\r\n            </p>\r\n            <Link to={\"/\"}><button>Cancel</button></Link>\r\n            <input type=\"submit\"/>\r\n        </form>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport axios from 'axios';\r\nexport default props => {\r\n    const { authorId, successCallback } = props;\r\n    const deleteProduct = e => {\r\n        axios.delete('http://localhost:8000/api/author/' + authorId)\r\n            .then(res=>{\r\n                successCallback();\r\n            })\r\n    }\r\n    return (\r\n        <button onClick={deleteProduct}>\r\n            Delete\r\n        </button>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\nimport { Link } from '@reach/router';\r\nimport DeleteButton from './DeleteButton';\r\n\r\nexport default props => {\r\n    const [stuff, setStuff] = useState([]);\r\n\r\n    useEffect(() => {\r\n        axios.get('http://localhost:8000/api/author')\r\n            .then(res => setStuff(res.data));\r\n    }, [stuff])\r\n\r\n    const removeFromDom = authorId => {\r\n        setStuff(stuff.filter(author => author._id != authorId))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <table>\r\n                <tr>\r\n                    <th>Author</th>\r\n                    <th>Actions available</th>\r\n                </tr>\r\n            {stuff.map((author, idx) => {\r\n                return (\r\n                    <tr key={idx}>\r\n                    <td>{author.name}</td>\r\n                    <td>\r\n                        <Link to={\"/\" + author._id + \"/edit\"}>\r\n                            Edit\r\n                        </Link> \r\n                        |\r\n                        <DeleteButton authorId={author._id} successCallback={()=>removeFromDom(author._id)}/>\r\n                    </td>\r\n                    </tr>\r\n                )\r\n            })}\r\n            </table>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\nimport { Link } from '@reach/router';\r\nimport AuthorForm from '../components/AuthorForm';\r\nimport AuthorList from '../components/AuthorList';\r\n\r\nexport default () => {\r\n    const [people, setPeople] = useState([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n    useEffect(() => {\r\n        axios.get('http://localhost:8000/api/author')\r\n            .then(res =>{ \r\n                setPeople(res.data)\r\n                setLoaded(true);\r\n            });\r\n    }, [people])\r\n    const removeFromDom = authorId => {\r\n        setPeople(people.filter(author => author._id != author));\r\n    }\r\n    // const createAuthor = author => {\r\n    //     axios.post('http://localhost:8000/api/author', author)\r\n    //         .then(res=>{\r\n    //             setPeople([...people, res.data]);\r\n    //         })\r\n    // }\r\n    return (\r\n        <div>\r\n            <h1>Favorite authors</h1>\r\n            <Link to={\"/new\"}>add an author</Link>\r\n            <h3>We have quotes by:</h3>\r\n            {/* <AuthorForm onSubmitProp={createAuthor} initialName=\"\"/> */}\r\n            <hr/>\r\n            {loaded && <AuthorList people={people} removeFromDom={removeFromDom}/>}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\nimport { navigate } from '@reach/router';\r\nimport AuthorForm from '../components/AuthorForm';\r\nimport DeleteButton from '../components/DeleteButton';\r\nimport { Link } from '@reach/router';\r\n\r\nexport default props => {\r\n    const { id } = props;\r\n    const [author, setAuthor] = useState();\r\n    const [loaded, setLoaded] = useState(false);\r\n    useEffect(() => {\r\n        axios.get('http://localhost:8000/api/author/' + id)\r\n            .then(res => {\r\n                setAuthor(res.data);\r\n                setLoaded(true);\r\n            })\r\n    }, [])\r\n\r\n    const updateAuthor = author => {\r\n        axios.put('http://localhost:8000/api/author/' + id, author)\r\n            .then(res => console.log(res));\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Favorite authors</h1>\r\n            <Link to={\"/\"}>Home</Link>\r\n            <h3>Update this author:</h3>\r\n            {loaded && (\r\n                <>\r\n                    <AuthorForm\r\n                        onSubmitProp={updateAuthor}\r\n                        initialName={author.name}\r\n                    />\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\nimport { Link } from '@reach/router';\r\nimport AuthorForm from '../components/AuthorForm'\r\n\r\nexport default props => {\r\n    const [author, setAuthor] = useState([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [errors, setErrors] = useState([]); \r\n    useEffect(() => {\r\n        axios.get('http://localhost:8000/api/author')\r\n            .then(res =>{ \r\n                setAuthor(res.data)\r\n                setLoaded(true);\r\n            });\r\n    }, [])\r\n    \r\n    const createAuthor = person => {\r\n        axios.post('http://localhost:8000/api/author', person)\r\n            .then(res=>{\r\n                setAuthor([...author, res.data]);\r\n            })\r\n            .then(res=>console.log(res)) // If successful, do something with the response. \r\n            .catch(err=>{\r\n                const errorResponse = err.response.data.errors; // Get the errors from err.response.data\r\n                const errorArr = []; // Define a temp error array to push the messages in\r\n                for (const key of Object.keys(errorResponse)) { // Loop through all errors and get the messages\r\n                    errorArr.push(errorResponse[key].message)\r\n                }\r\n                // Set Errors\r\n                setErrors(errorArr);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Favorite authors</h1>\r\n            <Link to={\"/\"}>Home</Link>\r\n            <h3>Add a new author:</h3>\r\n            {errors.map((err, index) => <p key={index}>{err}</p>)}\r\n            <AuthorForm onSubmitProp={createAuthor} initialName=\"\"/>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport { Router } from '@reach/router';\nimport Main from './views/Main';\nimport Update from './views/Update'\nimport NewAuthor from './views/NewAuthor'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Main path=\"/\"/>\n        <NewAuthor path = \"/new\"/>\n        <Update path=\"/:id/edit\"/>\n      </Router>\n    </div>\n  );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}